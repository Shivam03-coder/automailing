generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(cuid())
    email     String?
    firstName String
    lastName  String
    imageUrl  String
    createdAt DateTime  @default(now())
    Account   Account[]
}

model Account {
    id               String            @id @default(cuid())
    userId           String
    accessToken      String            @unique
    name             String
    email            String
    latestDeltaToken String?
    user             User              @relation(fields: [userId], references: [id])
    threads          UserEmailThread[]
    emailAddresses   EmailAddress[]
    emails           UserEmail[]
}

// THREAD IS COLLECTION OF MESSAGES SENT 

model UserEmailThread {
    id                   String         @id @default(cuid())
    emailSubject         String
    emailLastMessageDate DateTime
    participantIds       String[]
    accountId            String
    account              Account        @relation(fields: [accountId], references: [id])
    emailStatus          Boolean        @default(false)
    emailInboxStatus     Boolean        @default(true)
    emailDraftStatus     Boolean        @default(false)
    emailSentStatus      Boolean        @default(false)
    allEmails            EmailAddress[]
    emails               UserEmail[]

    @@index([accountId])
    @@index([emailStatus])
    @@index([emailInboxStatus])
    @@index([emailDraftStatus])
    @@index([emailSentStatus])
    @@index([emailLastMessageDate])
}

// EMAILS 

model UserEmail {
    id                   String                @id @default(cuid())
    threadId             String
    thread               UserEmailThread       @relation(fields: [threadId], references: [id])
    createdTime          DateTime
    lastModifiedTime     DateTime
    sentAt               DateTime
    receivedAt           DateTime
    internetMessageId    String
    subject              String
    sysLabels            String[]
    keywords             String[]
    sysClassifications   String[]
    sensitivity          Sensitivity           @default(normal)
    meetingMessageMethod MeetingMessageMethod?
    fromId               String
    from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
    to                   EmailAddress[]        @relation("ToEmails")
    cc                   EmailAddress[]        @relation("CcEmails")
    bcc                  EmailAddress[]        @relation("BccEmails")
    replyTo              EmailAddress[]        @relation("ReplyToEmails")
    hasAttachments       Boolean
    body                 String?
    bodySnippet          String?
    attachments          EmailAttachment[]
    inReplyTo            String?
    references           String?
    threadIndex          String?
    internetHeaders      Json[]
    nativeProperties     Json?
    folderId             String?
    omitted              String[]
    emailLabel           EmailLabel            @default(inbox)
    accountId            String?
    account              Account?              @relation(fields: [accountId], references: [id])

    @@index([threadId])
    @@index([emailLabel])
    @@index([sentAt])
}

enum EmailLabel {
    inbox
    sent
    draft
}

model EmailAddress {
    id                String            @id @default(cuid())
    name              String?
    address           String
    raw               String?
    sentEmails        UserEmail[]       @relation("FromEmail")
    receivedTo        UserEmail[]       @relation("ToEmails")
    receivedCc        UserEmail[]       @relation("CcEmails")
    receivedBcc       UserEmail[]       @relation("BccEmails")
    replyToEmails     UserEmail[]       @relation("ReplyToEmails")
    accountId         String
    account           Account           @relation(fields: [accountId], references: [id])
    userEmailThreadId String?
    userEmailThread   UserEmailThread?  @relation(fields: [userEmailThreadId], references: [id])
    attachments       EmailAttachment[]

    @@unique([accountId, address])
}

model EmailAttachment {
    id              String        @id @default(cuid())
    name            String
    mimeType        String
    size            Int
    inline          Boolean
    contentId       String?
    content         String?
    contentLocation String?
    Email           UserEmail     @relation(fields: [emailId], references: [id])
    emailId         String
    EmailAddress    EmailAddress? @relation(fields: [emailAddressId], references: [id])
    emailAddressId  String?
}

enum Sensitivity {
    normal
    private
    personal
    confidential
}

enum MeetingMessageMethod {
    request
    reply
    cancel
    counter
    other
}
